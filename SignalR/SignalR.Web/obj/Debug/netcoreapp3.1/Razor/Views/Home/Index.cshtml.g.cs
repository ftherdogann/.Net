#pragma checksum "D:\FATİH\TFSWork\SignalR\SignalR.Web\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2b9f14b8f7e8d782364ee9118cd5f430e9504d62"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\FATİH\TFSWork\SignalR\SignalR.Web\Views\_ViewImports.cshtml"
using SignalR.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\FATİH\TFSWork\SignalR\SignalR.Web\Views\_ViewImports.cshtml"
using SignalR.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2b9f14b8f7e8d782364ee9118cd5f430e9504d62", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"88e304c0afa9a0e898930a78a51a7a36ab26ffc0", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/microsoft/signalr/dist/browser/signalr.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\FATİH\TFSWork\SignalR\SignalR.Web\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2b9f14b8f7e8d782364ee9118cd5f430e9504d623715", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <script type=""text/javascript"">
        $(document).ready(() => {
            //.configureLogging(signalR.LogLevel.Information)
            var connection = new signalR.HubConnectionBuilder().withAutomaticReconnect([1000, 3000, 3000, 2000]).withUrl(""https://localhost:5001/MyHub"").build();
            //function
            start();
            function statusShow() {
                $(""#constatus"").text(connection._connectionState);
            }
            function start() {
                connection.start().then(() => {
                    statusShow();
                    $('#loading').hide();
                    //connection.invoke(""GetNames"");
                    connection.invoke(""GetNamesByGroup"");
                }).catch((error) => {
                    console.log(error)
                    setTimeout(() => start(), 2000)
                })
            }
            statusShow();

            //subcribes
            connection.onreconnecting(error => {
               ");
                WriteLiteral(@" $('#loading').show();
                statusShow();
                console.log(""onreconnection"" + error);
            })
            connection.onreconnected(connectionId => {
                $('#loading').hide();
                statusShow();
                console.log(""connectionId:"" + connectionId);
            })
            connection.onclose(() => {
                $('#loading').hide();
                statusShow();
                start();
            })
            connection.on(""ReceiveClientCount"", (clientCount) => {
                $(""#clientCount"").text(clientCount);
            })
            connection.on(""ReceiveNames"", (names) => {
                $(""#namesList"").empty();
                names.forEach((item, index) => {
                    $(""#namesList"").append(`<li class=""list-group-item"">${item} </li>`)
                })
            })
            connection.on(""ReceiveName"", (name) => {
                $(""#namesList"").append(`<li class=""list-group-item""> ${name}");
                WriteLiteral(@"</li>`)
            })
            connection.on(""Notify"", (countText) => {
                $('#notify').html(`<div class=""alert alert-success"">${countText}</div>`)
            })
            connection.on(""Error"", (error) => {
                alert(error);
            })
            connection.on(""ReceiveName"", (name) => {
                console.log(name);
            })
            connection.on(""ReceiveMessageByGroup"", (name, teamId) => {
                let listName; 
                if (teamId == 1) {
                    listName = ""ATeamList"";
                }
                else {
                    listName = ""BTeamList"";
                }
                $(`#${listName}`).append(`<li class= ""list-group-item""> ${name} </li>`)
            })
            connection.on(""ReceiveNamesByGroup"", (teams) => {
               teams.forEach((team,index)=>{
                    if (team.teamId == 1) {
                        listName = ""ATeamList"";
                    }
              ");
                WriteLiteral(@"      else {
                        listName = ""BTeamList"";
                    }
                    team.users.forEach((user, index2) => {
                        $(`#${listName}`).append(`<li class= ""list-group-item""> ${user.name} </li>`)
                    })
               })
            })
            connection.on(""ReceiveProduct"", (product) => {
                console.log(product);
            })
            //clicks
            $(""#btnNameSave"").click(() => {
                connection.invoke(""SendName"", $(""#txtName"").val()).catch((error) => {
                    console.log(error)
                })
            })
            $(""#btnSendProduct"").click(() => {
                let product={""Id"":1,""Name"":""Kalem"",""Price"":200,""Stock"":10};
                connection.invoke(""SendProduct"", product).catch((error) => {
                    console.log(error)
                })
            })
            $(""#btnNameTeam"").click(() => {
                let name = $(""#txtName"").val();");
                WriteLiteral(@"

                let teamName = $(""input[type=radio]:checked"").val();
                if(teamName==null){
                    alert(""Takım seçiniz."");
                    return;
                }
                connection.invoke(""SendNameByGroup"", name, teamName).catch((error) => {
                    console.log(error);
                });
            })
            $(""input[type=radio]"").change(()=>{
                let value = $(""input[type=radio]:checked"").val();
                
                if(value==""Team A""){
                    connection.invoke(""AddToGroup"", value).catch((error) => {
                        console.log(error)
                    })
                    connection.invoke(""RemoveToGroup"", ""Team B"").catch((error) => {
                        console.log(error)
                    })
                }
                else{
                    connection.invoke(""AddToGroup"", value).catch((error) => {
                        console.log(error)
                ");
                WriteLiteral("    })\r\n                    connection.invoke(\"RemoveToGroup\", \"Team A\").catch((error) => {\r\n                        console.log(error)\r\n                    })\r\n                }\r\n            })\r\n\r\n\r\n        })\r\n\r\n    </script>\r\n");
            }
            );
            WriteLiteral(@"    <div class=""row"">
        <div class=""col-md-8 offset-2"">
            <input class=""form-control"" type=""text"" id=""txtName"" />
            <hr />
            <button class=""btn-primary"" id=""btnNameSave"">İsim Kaydet</button>
            <button class=""btn-warning"" id=""btnNameTeam"">İsim Kaydet(Takım)</button>
            <button class=""btn-danger"" id=""btnSendProduct"">Ürün Gönder</button>
            <div class=""alert alert-info mt-2"">
                <div class=""float-left"">
                    Bağlantı Durumu: <strong id=""constatus""></strong>
                    Aktif Bağlantı Sayısı : <strong id=""clientCount""></strong>
                </div>
                <div class=""float-right"">
                    <div id=""loading"" class=""spinner-border"" role=""status"">
                        <span class=""sr-only"">Loading...</span>
                    </div>
                </div>
                <div class=""clearfix""></div>
            </div>

            <div id=""notify""></div>
        </div>
");
            WriteLiteral(@"

    </div>
    <div class=""row"">
        <div class=""col-md-8 offset-md-2"">
            <div class=""form-check form-check-inline"">
                <input class=""form-check-input"" type=""radio"" name=""TeamGroup"" value=""Team A"" />
                <label class=""form-check-label"">A Takımı</label>
            </div>
            <div class=""form-check form-check-inline"">
                <input class=""form-check-input"" type=""radio"" name=""TeamGroup"" value=""Team B"" />
                <label class=""form-check-label"">B Takımı</label>
            </div>
        </div>
        <div class=""col-md-8 offset-2"">
            <div class=""row"">
                <div class=""col-md-6"">
                    <h2>A Takımı</h2>
                    <ul class=""list-group"" id=""ATeamList""></ul>
                </div>
                <div class=""col-md-6"">
                    <h2>B Takımı</h2>
                    <ul class=""list-group"" id=""BTeamList""></ul>
                </div>
            </div>
            <ul clas");
            WriteLiteral("s=\"list-group\" id=\"namesList\"></ul>\r\n        </div>\r\n    </div>\r\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
